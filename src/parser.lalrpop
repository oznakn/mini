grammar;

use std::str::FromStr;
use indexmap::IndexSet;

use crate::ast;

match {
    ",",
    ".",
    ";",
    ":",
    "=",
    "+",
    "-",
    "!",
    "*",
    "/",
    "%",
    "==",
    "===",
    "!=",
    "!==",
    "<",
    "<=",
    ">",
    ">=",
    "&&",
    "||",
    "{",
    "}",
    "(",
    ")",
    "[",
    "]",
    "let",
    "const",
    "string",
    "number",

    "true",
    "false",
    "undefined",
    "null",

    "return",
    "void",
    "declare",
    "function",
    "export",
    "import",
    "from",

    r"[0-9]+",
    r"[0-9]+\.[0-9]+",
    r"[a-zA-Z_][a-zA-Z0-9_]*",
    r"@[a-zA-Z_][a-zA-Z0-9_]*",
    r"'[^\n\r']*'",
    r"`[^\n\r`]*`",

    // Skip whitespace and comments
    r"\s*" => { },
    r"//[^\n\r]*[\n\r]*" => { }, // `// comment`
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { }, // `/* comment */`
}

CommaList<T>: Vec<T> = {
    <items: (<T> ",")*> <last: T?> => {
        let mut items = items;
        items.extend(last);
        items
    }
};

pub Program: ast::Program<'input> =
    <statements:StatementList> => ast::Program {
        statements,
    };

StatementList = Statement*;

Body = "{" <StatementList> "}";

Statement: ast::Statement<'input> = {
    <expression:Expression> ";" => ast::Statement::ExpressionStatement { expression },
    ";" => ast::Statement::EmptyStatement,
    DefinitionStatement,
    FunctionStatement,
    ReturnStatement,
};

FunctionReturnKind: ast::VariableKind = {
    "void" => ast::VariableKind::Undefined,
    <kind:VariableKind> => kind,
};

FunctionDecorators: IndexSet<&'input str> = {
    <names:DecoratorName*> => {
        IndexSet::from_iter(names.into_iter())
    }
};

FunctionStatement: ast::Statement<'input> = {
    <l1:@L> <decorators:FunctionDecorators> <is_external:"declare"?> "function" <ll1:@L> <name:IdentifierName> <ll2:@R> "(" <parameters:CommaList<VariableDefinition>> ")" ":" <return_kind:FunctionReturnKind> <l2:@R> <statements:Body?> => {
        if is_external.is_none() && statements.is_none() {
            panic!("Function must have a body");
        }

        if is_external.is_some() && statements.is_some() {
            panic!("External function cannot have a body");
        }

        ast::Statement::FunctionStatement {
            location: (l1, l2),
            definition: ast::VariableDefinition {
                location: (ll1, ll2),
                name,
                kind: ast::VariableKind::Function {
                    return_kind: Box::new(return_kind),
                    parameters: parameters
                            .iter()
                            .map(|parameter| parameter.kind.clone())
                            .collect(),
                },
                is_writable: false,
                is_external: is_external.is_some(),
                decorators,
            },
            parameters,
            statements: statements.unwrap_or_default(),
        }
    },
};

ReturnStatement: ast::Statement<'input> = {
    <l1:@L> "return" <e:Expression?> ";" <l2:@R> => ast::Statement::ReturnStatement {
        location: (l1, l2),
        expression: e,
    }
}

DefinitionStatementPrefix = {
    "let",
    "const",
};

DefinitionStatement: ast::Statement<'input> = {
    <l1:@L> <prefix:DefinitionStatementPrefix> <definition:VariableDefinition> <e:("=" <Expression>)?> ";" <l2:@R> => {
        let mut definition = definition;
        definition.is_writable = prefix == "let";

        ast::Statement::DefinitionStatement {
            location: (l1, l2),
            definition,
            expression: e,
        }
    },
}

Expression: ast::Expression<'input> = {
    AssignmentExpression,
    BinaryExpression,
};

AssignmentExpression: ast::Expression<'input> =
    <l1:@L> <identifier:VariableIdentifier> "=" <e:Expression> <l2:@R> => ast::Expression::AssignmentExpression {
        location: (l1, l2),
        identifier,
        expression: Box::new(e),
    };

Term<S, O, E>: ast::Expression<'input> = {
    <l1:@L> <left:S> <operator:O> <right:E> <l2:@R> => ast::Expression::BinaryExpression {
        location: (l1, l2),
        left: Box::new(left),
        operator,
        right: Box::new(right),
    },
    E,
};

BinaryExpression = LogicalTerm4;

LogicalTerm4 = Term<LogicalTerm4, LogicalOperator4, LogicalTerm3>;
LogicalTerm3 = Term<LogicalTerm3, LogicalOperator3, LogicalTerm2>;
LogicalTerm2 = Term<LogicalTerm2, LogicalOperator2, LogicalTerm1>;
LogicalTerm1 = Term<LogicalTerm1, LogicalOperator1, AddTerm>;
AddTerm = Term<AddTerm, AddOperator, MulTerm>;
MulTerm = Term<MulTerm, MulOperator, UnaryTerm>;

UnaryTerm: ast::Expression<'input> = {
    <l1:@L> <operator:UnaryOperator> <e:UnaryTerm> <l2:@R> => ast::Expression::UnaryExpression {
        location: (l1, l2),
        operator,
        expression: Box::new(e),
    },
    Factor,
};

Factor: ast::Expression<'input> = {
    <l1:@L> <value:Constant> <l2:@R> => ast::Expression::ConstantExpression {
        location: (l1, l2),
        value,
    },
    <l1:@L> <identifier:VariableIdentifier> <l2:@R> => ast::Expression::VariableExpression {
        location: (l1, l2),
        identifier
    },
    <l1:@L> <identifier:VariableIdentifier> "(" <arguments:CommaList<Expression>> ")"  <l2:@R> => ast::Expression::CallExpression {
        location: (l1, l2),
        identifier,
        arguments
    },
    "(" <e:Expression> ")" => e,
};

UnaryOperator: ast::UnaryOperator = {
    "+" => ast::UnaryOperator::Positive,
    "-" => ast::UnaryOperator::Negative,
    "!" => ast::UnaryOperator::Not,
};

AddOperator: ast::BinaryOperator = {
    "+" => ast::BinaryOperator::Addition,
    "-" => ast::BinaryOperator::Subtraction,
};

MulOperator: ast::BinaryOperator = {
    "*" => ast::BinaryOperator::Multiplication,
    "/" => ast::BinaryOperator::Division,
    "%" => ast::BinaryOperator::Mod,
};

LogicalOperator1: ast::BinaryOperator = {
    "<" => ast::BinaryOperator::Less,
    "<=" => ast::BinaryOperator::LessEqual,
    ">" => ast::BinaryOperator::Greater,
    ">=" => ast::BinaryOperator::GreaterEqual,
};

LogicalOperator2: ast::BinaryOperator = {
    "==" => ast::BinaryOperator::Equal,
    "===" => ast::BinaryOperator::StrictEqual,
    "!=" => ast::BinaryOperator::NotEqual,
    "!==" => ast::BinaryOperator::StrictNotEqual,
};

LogicalOperator3: ast::BinaryOperator = {
    "&&" => ast::BinaryOperator::And,
};

LogicalOperator4: ast::BinaryOperator = {
    "||" => ast::BinaryOperator::Or,
};

VariableDefinition: ast::VariableDefinition<'input> = {
    <l1:@L> <name:IdentifierName> ":" <kind:VariableKind> <l2:@R> => ast::VariableDefinition {
        location: (l1, l2),
        name,
        kind,
        is_writable: true,
        is_external: false,
        decorators: IndexSet::new(),
    },
}

VariableIdentifier: ast::VariableIdentifier<'input> = {
    <l1:@L> <name:IdentifierName> <l2:@R> => ast::VariableIdentifier::Name {
        location: (l1, l2),
        name,
    },
    <l1:@L> <base:VariableIdentifier> "." <property:IdentifierName> <l2:@R> => ast::VariableIdentifier::Property {
        location: (l1, l2),
        base: Box::new(base),
        property,
    },
    <l1:@L> <base:VariableIdentifier> "[" <index:Expression> "]" <l2:@R> => ast::VariableIdentifier::Index {
        location: (l1, l2),
        base: Box::new(base),
        index: Box::new(index),
    },
};

DecoratorName: &'input str =
    <name:r"@[a-zA-Z_][a-zA-Z0-9_]*"> => name;

IdentifierName: &'input str =
    <name:r"[a-zA-Z_][a-zA-Z0-9_]*"> => name;

String: ast::Constant<'input> = {
    <value:r"'[^\n\r']*'"> => ast::Constant::String(&<>[1..<>.len()-1]),
    <value:r"`[^\n\r`]*`"> => ast::Constant::String(&<>[1..<>.len()-1]),
};

Number: ast::Constant<'input> = {
    <value:r"[0-9]+"> => ast::Constant::Integer(u64::from_str(<>).unwrap()),
    <value:r"[0-9]+\.[0-9]+"> => ast::Constant::Float(f64::from_str(<>).unwrap()),
}

Constant: ast::Constant<'input> = {
    Number,
    String,
    "true" => ast::Constant::Boolean(true),
    "false" => ast::Constant::Boolean(false),
    "undefined" => ast::Constant::Undefined,
    "null" => ast::Constant::Null,
};

VariableKind: ast::VariableKind = {
    "string" => ast::VariableKind::String,
    "number" => ast::VariableKind::Number {
        is_float: false,
    },
};
