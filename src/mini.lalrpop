grammar;

use crate::ast;

match {
    ",",
    ".",
    ";",
    r"[a-zA-Z0-9]+",

    // Skip whitespace and comments
    r"\s*" => { },
    r"//[^\n\r]*[\n\r]*" => { }, // `// comment`
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { }, // `/* comment */`
}


List<T>: Vec<T> = {
    <items: (<T> ",")*> <last: T?> => {
        let mut items = items;
        items.extend(last);
        items
    }
};

pub Program: ast::Program<'input> =
    <statement_list:StatementList> => ast::Program {
        statement_list,
    };

Statement: ast::Statement<'input> = {
    <expression:Expression> ";"? => ast::Statement::ExpressionStatement(expression),
};

StatementList =
    Statement*;

Expression: ast::Expression<'input> = {
    <identifier:Identifier> => ast::Expression::AssignmentExpression { identifier },
};

Identifier: ast::Identifier<'input> =
    <name:r"[a-zA-Z0-9]+"> => ast::Identifier {
        name,
    };
