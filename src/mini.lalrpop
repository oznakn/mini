grammar;

use std::str::FromStr;

use crate::ast;

match {
    ",",
    ".",
    ";",
    ":",
    "=",
    "let",
    "const",
    "string",
    "number",
    r"[0-9]+",
    r"[0-9]+\.[0-9]+",
    r"[a-zA-Z][a-zA-Z0-9]*",
    r"'[^\n\r]*'",

    // Skip whitespace and comments
    r"\s*" => { },
    r"//[^\n\r]*[\n\r]*" => { }, // `// comment`
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { }, // `/* comment */`
}

CommaList<T>: Vec<T> = {
    <items: (<T> ",")*> <last: T?> => {
        let mut items = items;
        items.extend(last);
        items
    }
};

SemiColonList<T>: Vec<T> = {
    <items: (<T> ";")*> <last: T?> => {
        let mut items = items;
        items.extend(last);
        items
    }
};

pub Program: ast::Program<'input> =
    <statement_list:SemiColonList<Statement>> => ast::Program {
        statement_list,
    };

Statement: ast::Statement<'input> = {
    "let" <identifier:VariableIdentifier> ":" <variable_type:VariableType> => ast::Statement::DefinitionStatement { identifier, variable_type, is_const: false },
    "const" <identifier:VariableIdentifier> ":" <variable_type:VariableType> => ast::Statement::DefinitionStatement { identifier, variable_type, is_const: true },
    <expression:Expression> => ast::Statement::ExpressionStatement { expression },
};

Expression: ast::Expression<'input> = {
    <value:Value> => ast::Expression::ValueExpression { value },
    <identifier:VariableIdentifier> => ast::Expression::VariableExpression { identifier },
    <identifier:VariableIdentifier> "=" <expression:Expression> => ast::Expression::AssignmentExpression { identifier, expression: Box::new(expression) },
};

VariableType: ast::VariableType = {
    "string" => ast::VariableType::String,
    "number" => ast::VariableType::Number,
};

VariableIdentifier: ast::VariableIdentifier<'input> =
    <name:r"[a-zA-Z][a-zA-Z0-9]*"> => ast::VariableIdentifier {
        name,
    };

Value: ast::Value<'input> = {
    <value:r"[0-9]+"> => ast::Value::Integer(u64::from_str(<>).unwrap()),
    <value:r"[0-9]+\.[0-9]+"> => ast::Value::Float(f64::from_str(<>).unwrap()),
    <value:r"'[^\n\r]*'"> => ast::Value::String(&<>[1..<>.len()-1]),
}
